rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===============================================
    // REGLAS PARA USUARIOS (`users`)
    // ===============================================
    match /users/{userId} {
      // Cualquiera puede leer un perfil público.
      allow read: if true;
      // Un usuario solo puede crear su propio documento.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Un usuario solo puede actualizar o borrar su propio documento.
      allow update, delete: if request.auth != null && request.auth.uid == userId;

      // Un usuario solo puede modificar su propia lista de 'siguiendo'.
      match /following/{followId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Un usuario solo puede leer su lista de 'seguidores'. Nadie más.
      match /followers/{followerId} {
        allow read, list: if request.auth != null && request.auth.uid == userId;
        // La creación y borrado de esta subcolección se gestiona por la Cloud Function.
        allow write: if false; 
      }
    }

    // ===============================================
    // REGLAS PARA LISTAS (`lists`)
    // ===============================================
    match /lists/{listId} {
      // Se puede leer si es pública, o si eres el dueño.
      allow read: if resource.data.isPublic == true || (request.auth != null && resource.data.userId == request.auth.uid);
      // Solo puedes crear listas para ti mismo.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Solo el dueño puede actualizar o borrar la lista.
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Reglas para subcolecciones de una lista
      match /reviews/{reviewId} {
        // Se pueden leer las reseñas si la lista es pública o eres el dueño.
        allow read: if get(/databases/$(database)/documents/lists/$(listId)).data.isPublic == true ||
                      (request.auth != null && get(/databases/$(database)/documents/lists/$(listId)).data.userId == request.auth.uid);
        // Solo puedes crear reseñas para ti mismo.
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Solo el dueño de la reseña puede modificarla o borrarla.
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        // Solo el autor del comentario o el dueño de la lista pueden moderar.
        allow update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/lists/$(listId)).data.userId == request.auth.uid);
      }
    }

    // ===============================================
    // REGLAS PARA LUGARES (`places`)
    // ===============================================
    match /places/{placeId} {
      allow read: if true;
      // Cualquiera autenticado puede crear un lugar nuevo.
      allow create: if request.auth != null;
      // Cualquiera autenticado puede actualizar un lugar.
      // Específicamente para el campo 'followers':
      // - Solo se permite añadir o quitar el propio UID del usuario.
      // - No se permite modificar otros campos si solo se está actualizando 'followers'.
      allow update: if request.auth != null &&
                       (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers']) ?
                         (request.resource.data.followers.toSet().hasOnly(resource.data.followers.toSet().symmetricDifference([request.auth.uid])) ||
                          request.resource.data.followers.toSet().difference(resource.data.followers.toSet()).hasOnly([request.auth.uid]) ||
                          resource.data.followers.toSet().difference(request.resource.data.followers.toSet()).hasOnly([request.auth.uid])
                         ) &&
                         // Asegurar que el tamaño del array solo cambie en 1
                         (request.resource.data.followers.size() == resource.data.followers.size() + 1 ||
                          request.resource.data.followers.size() == resource.data.followers.size() - 1)
                       : true // Permitir la actualización de otros campos si no se está tocando 'followers' o si se tocan más campos además de 'followers'
                       );
      // Nadie puede borrar lugares para mantener la integridad de los datos.
      allow delete: if false; 
    }

    // ===============================================
    // REGLAS PARA INSIGNIAS Y CATEGORÍAS (Solo lectura)
    // ===============================================
    match /badges/{badgeId} {
      allow read: if true;
      allow write: if false;
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false;
    }
    
    // ===============================================
    // REGLA PARA CONSULTAS DE GRUPO (`collectionGroup`)
    // ===============================================
    // Esta es la regla clave que permite a la página de perfil
    // obtener todas las reseñas de un usuario.
    match /{path=**}/reviews/{reviewId} {
      // Permite a cualquier usuario autenticado LISTAR y OBTENER reseñas.
      // Es necesario para la consulta `collectionGroup('reviews').where('userId', '==', ...)`.
      allow list, get: if request.auth != null;
    }
    
    // ===============================================
    // FORUM RULES (Tus reglas, sin cambios)
    // ===============================================
    match /listForums/{listId} {
      allow create: if request.auth != null;
      allow read: if true;
      
      match /messages/{messageId} {
        allow create: if request.auth != null;
        allow update: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == get(/databases/$(database)/documents/lists/$(listId)).data.userId);
        allow read: if true;
        allow delete: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == get(/databases/$(database)/documents/lists/$(listId)).data.userId);
      }
    }
  }
}