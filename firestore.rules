rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Reglas para la colección 'users'
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;

      match /following/{followId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Reglas para la colección 'lists'
    match /lists/{listId} {
      // LEER:
      // - Si la lista es pública (campo 'isPublic' == true).
      // - O si el usuario autenticado es el propietario de la lista (campo 'userId' == request.auth.uid).
      allow read: if resource.data.isPublic == true || 
                     (request.auth != null && resource.data.userId == request.auth.uid);

      // CREAR:
      // - El usuario debe estar autenticado.
      // - El 'userId' en el nuevo documento DEBE ser el UID del usuario autenticado.
      // - Valida los campos requeridos y sus tipos.
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 && // Asegurar que el nombre no esté vacío
                       request.resource.data.isPublic is bool &&
                       request.resource.data.criteriaDefinition is map &&
                       request.resource.data.availableTags is list &&
                       (!('createdAt' in request.resource.data) || request.resource.data.createdAt == request.time) && // Permitir timestamp del servidor o que no venga
                       (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt == request.time);  // Permitir timestamp del servidor o que no venga

      // ACTUALIZAR:
      // - El usuario debe ser el propietario de la lista.
      // - No se puede cambiar el 'userId' (propietario original).
      // - Valida los campos que se pueden actualizar.
      allow update: if request.auth != null &&
                       resource.data.userId == request.auth.uid && // Solo el propietario
                       request.resource.data.userId == resource.data.userId && // No permitir cambiar el propietario
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.isPublic is bool &&
                       request.resource.data.criteriaDefinition is map &&
                       request.resource.data.availableTags is list &&
                       (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt == request.time); // Asegurar que updatedAt sea timestamp del servidor

      // BORRAR:
      // - El usuario debe ser el propietario de la lista.
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Reglas para la subcolección 'reviews' dentro de 'lists'
      match /reviews/{reviewId} {
        // LEER: Si la lista contenedora es pública o si el usuario es el propietario de la lista.
        allow read: if get(/databases/$(database)/documents/lists/$(listId)).data.isPublic == true ||
                       (request.auth != null && get(/databases/$(database)/documents/lists/$(listId)).data.userId == request.auth.uid);
        
        // CREAR: Usuario autenticado, el userId de la reseña es el suyo, y el listId de la reseña coincide con el de la lista padre.
        allow create: if request.auth != null && 
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.listId == listId && // Asegura que la reseña se asocia a la lista correcta
                         request.resource.data.establishmentName is string && // Validaciones de ejemplo
                         request.resource.data.scores is map;

        // ACTUALIZAR Y BORRAR: Solo el usuario que creó la reseña.
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }
    }

    // Reglas para la colección 'badges' (ejemplo)
    match /badges/{badgeId} {
      allow read: if true;
      allow write: if false; // Generalmente gestionados por backend
    }
  }
}