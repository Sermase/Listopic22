rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===============================================
    // REGLAS PARA USUARIOS (`users`)
    // ===============================================
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;

      match /following/{followId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // ===============================================
    // REGLAS PARA LISTAS (`lists`)
    // ===============================================
    match /lists/{listId} {
      allow read: if resource.data.isPublic == true || (request.auth != null && resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;

      match /reviews/{reviewId} {
        allow read: if get(/databases/$(database)/documents/lists/$(listId)).data.isPublic == true ||
                      (request.auth != null && get(/databases/$(database)/documents/lists/$(listId)).data.userId == request.auth.uid);
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }
    }

    // ===============================================
    // REGLAS PARA LUGARES (`places`)
    // ===============================================
    match /places/{placeId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid;
      allow update: if request.auth != null;
      allow delete: if false; 
    }

    // ===============================================
    // REGLAS PARA INSIGNIAS (`badges`)
    // ===============================================
    match /badges/{badgeId} {
      allow read: if true;
      allow write: if false;
    }

    // ===============================================
    // REGLA PARA CONSULTAS DE GRUPO (`collectionGroup`)
    // ===============================================
    match /{path=**}/reviews/{reviewId} {
      // ***** CORRECCIÓN USANDO LISTID DEL DOCUMENTO *****
      // Permitir leer reseñas si:
      // 1. El usuario está autenticado Y es el dueño de la reseña
      // 2. O si la lista asociada (usando resource.data.listId) es pública
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.isPublic == true
      );
      // ***** FIN DE LA CORRECCIÓN *****
    }
    
    // ===============================================
    // REGLA PARA CONSULTAS DE CATEGORIES
    // ===============================================
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false;
    }
  }
}