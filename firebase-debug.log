[debug] [2025-06-23T17:02:36.404Z] ----------------------------------------------------------------------
[debug] [2025-06-23T17:02:36.407Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\Ser\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js deploy --only firestore
[debug] [2025-06-23T17:02:36.408Z] CLI Version:   14.5.1
[debug] [2025-06-23T17:02:36.408Z] Platform:      win32
[debug] [2025-06-23T17:02:36.408Z] Node Version:  v22.14.0
[debug] [2025-06-23T17:02:36.408Z] Time:          Mon Jun 23 2025 19:02:36 GMT+0200 (hora de verano de Europa central)
[debug] [2025-06-23T17:02:36.408Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-06-23T17:02:36.633Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-06-23T17:02:36.633Z] > authorizing via signed-in user (sergio.marserr@gmail.com)
[debug] [2025-06-23T17:02:36.633Z] [iam] checking project listopic for permissions ["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]
[debug] [2025-06-23T17:02:36.634Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:36.635Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:36.636Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/listopic:testIamPermissions [none]
[debug] [2025-06-23T17:02:36.636Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/listopic:testIamPermissions x-goog-quota-user=projects/listopic
[debug] [2025-06-23T17:02:36.636Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/listopic:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[debug] [2025-06-23T17:02:36.986Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/listopic:testIamPermissions 200
[debug] [2025-06-23T17:02:36.986Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/listopic:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[info] 
[info] === Deploying to 'listopic'...
[info] 
[info] i  deploying firestore 
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2025-06-23T17:02:36.993Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:36.993Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:36.993Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/listopic:test [none]
[debug] [2025-06-23T17:02:36.993Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/listopic:test [omitted]
[debug] [2025-06-23T17:02:37.336Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/listopic:test 200
[debug] [2025-06-23T17:02:37.336Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/listopic:test {}
[info] +  cloud.firestore: rules file firestore.rules compiled successfully 
[debug] [2025-06-23T17:02:37.337Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:37.337Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:37.337Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default) [none]
[debug] [2025-06-23T17:02:37.643Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default) 200
[debug] [2025-06-23T17:02:37.644Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default) {"name":"projects/listopic/databases/(default)","uid":"a0ce4c60-370d-4c1d-83f4-5f5e361feb60","createTime":"2025-05-30T10:02:17.088892Z","updateTime":"2025-05-30T10:02:17.088892Z","locationId":"europe-west1","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-06-23T16:02:37.422695Z","appEngineIntegrationMode":"DISABLED","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","databaseEdition":"STANDARD","freeTier":true,"etag":"IJvnoO6CiI4DMM72xqn4yo0D"}
[debug] [2025-06-23T17:02:37.644Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:37.645Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:37.645Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/listopic/releases pageSize=10&pageToken=
[debug] [2025-06-23T17:02:37.943Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/listopic/releases 200
[debug] [2025-06-23T17:02:37.944Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/listopic/releases {"releases":[{"name":"projects/listopic/releases/cloud.firestore","rulesetName":"projects/listopic/rulesets/12fd18ea-f630-4ea7-b46c-5457afc4db1a","createTime":"2025-05-30T10:02:23.130634Z","updateTime":"2025-06-23T17:00:55.063739Z"},{"name":"projects/listopic/releases/firebase.storage/listopic.firebasestorage.app","rulesetName":"projects/listopic/rulesets/f434b4de-bf76-40fe-94b8-96511b67d4ad","createTime":"2025-05-29T12:58:30.540571Z","updateTime":"2025-05-29T12:58:30.540571Z"}]}
[debug] [2025-06-23T17:02:37.959Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:37.959Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:37.959Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/listopic/rulesets/12fd18ea-f630-4ea7-b46c-5457afc4db1a [none]
[debug] [2025-06-23T17:02:38.611Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/listopic/rulesets/12fd18ea-f630-4ea7-b46c-5457afc4db1a 200
[debug] [2025-06-23T17:02:38.611Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/listopic/rulesets/12fd18ea-f630-4ea7-b46c-5457afc4db1a [omitted]
[info] i  firestore: uploading rules firestore.rules... 
[debug] [2025-06-23T17:02:38.612Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:38.612Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:38.613Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/listopic/rulesets [none]
[debug] [2025-06-23T17:02:38.613Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/listopic/rulesets [omitted]
[debug] [2025-06-23T17:02:39.426Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/listopic/rulesets 200
[debug] [2025-06-23T17:02:39.427Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/listopic/rulesets {"name":"projects/listopic/rulesets/47bfe577-1b47-4de5-8e44-244e89c9ffd5","source":{"files":[{"content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n\r\n    // ===============================================\r\n    // REGLAS PARA USUARIOS (`users`)\r\n    // ===============================================\r\n    match /users/{userId} {\r\n      allow read: if true;\r\n      allow create: if request.auth != null && request.auth.uid == userId;\r\n      allow update, delete: if request.auth != null && request.auth.uid == userId;\r\n\r\n      match /following/{followId} {\r\n        allow read: if request.auth != null;\r\n        allow create, delete: if request.auth != null && request.auth.uid == userId;\r\n      }\r\n    }\r\n\r\n    // ===============================================\r\n    // REGLAS PARA LISTAS (`lists`)\r\n    // ===============================================\r\n    match /lists/{listId} {\r\n      allow read: if resource.data.isPublic == true || (request.auth != null && resource.data.userId == request.auth.uid);\r\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\r\n      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;\r\n\r\n      match /reviews/{reviewId} {\r\n        allow read: if get(/databases/$(database)/documents/lists/$(listId)).data.isPublic == true ||\r\n                      (request.auth != null && get(/databases/$(database)/documents/lists/$(listId)).data.userId == request.auth.uid);\r\n        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\r\n        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;\r\n      }\r\n      \r\n      match /comments/{commentId} {\r\n        allow read: if true;\r\n        allow create: if request.auth != null;\r\n        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;\r\n      }\r\n    }\r\n\r\n    // ===============================================\r\n    // REGLAS PARA LUGARES (`places`)\r\n    // ===============================================\r\n    match /places/{placeId} {\r\n      allow read: if true;\r\n      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid;\r\n      allow update: if request.auth != null;\r\n      allow delete: if false; \r\n    }\r\n\r\n    // ===============================================\r\n    // REGLAS PARA INSIGNIAS (`badges`)\r\n    // ===============================================\r\n    match /badges/{badgeId} {\r\n      allow read: if true;\r\n      allow write: if false;\r\n    }\r\n\r\n    // ===============================================\r\n    // REGLA PARA CONSULTAS DE GRUPO (`collectionGroup`)\r\n    // ===============================================\r\n    match /{path=**}/reviews/{reviewId} {\r\n      // ***** CORRECCIÓN USANDO LISTID DEL DOCUMENTO *****\r\n      // Permitir leer reseñas si:\r\n      // 1. El usuario está autenticado Y es el dueño de la reseña\r\n      // 2. O si la lista asociada (usando resource.data.listId) es pública\r\n      allow read: if request.auth != null && (\r\n        resource.data.userId == request.auth.uid ||\r\n        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.isPublic == true\r\n      );\r\n      // ***** FIN DE LA CORRECCIÓN *****\r\n    }\r\n    \r\n    // ===============================================\r\n    // REGLA PARA CONSULTAS DE CATEGORIES\r\n    // ===============================================\r\n    match /categories/{categoryId} {\r\n      allow read: if true;\r\n      allow write: if false;\r\n    }\r\n    \r\n\t\t// ===============================================\r\n    // FORUM RULES\r\n\t\t// ===============================================\r\n      match /listForums/{listId} {\r\n      allow create: if request.auth != null;\r\n      allow read: if true;\r\n      \r\n      match /messages/{messageId} {\r\n        allow create: if request.auth != null;\r\n        allow update: if request.auth != null &&                       \r\n                      (request.auth.uid == resource.data.userId || \r\n                       request.auth.uid == get(/databases/$(database)/documents/lists/$(listId)).data.userId);\r\n        allow read: if true;\r\n        allow delete: if request.auth != null && \r\n                      (request.auth.uid == resource.data.userId || \r\n                       request.auth.uid == get(/databases/$(database)/documents/lists/$(listId)).data.userId);\r\n      }\r\n    }\r\n  }\r\n}","name":"firestore.rules"}]},"createTime":"2025-06-23T17:02:39.134399Z","metadata":{"services":["cloud.firestore"]}}
[debug] [2025-06-23T17:02:39.427Z] [rules] created ruleset projects/listopic/rulesets/47bfe577-1b47-4de5-8e44-244e89c9ffd5
[info] i  firestore: deploying indexes... 
[debug] [2025-06-23T17:02:39.429Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:39.429Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:39.429Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default)/collectionGroups/-/indexes [none]
[debug] [2025-06-23T17:02:39.520Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default)/collectionGroups/-/indexes 200
[debug] [2025-06-23T17:02:39.520Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default)/collectionGroups/-/indexes {"indexes":[{"name":"projects/listopic/databases/(default)/collectionGroups/lists/indexes/CICAgJim14AK","queryScope":"COLLECTION","fields":[{"fieldPath":"isPublic","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/listopic/databases/(default)/collectionGroups/lists/indexes/CICAgJj7z4EK","queryScope":"COLLECTION","fields":[{"fieldPath":"userId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/listopic/databases/(default)/collectionGroups/reviews/indexes/CICAgJjF9oIK","queryScope":"COLLECTION","fields":[{"fieldPath":"establishmentName","order":"ASCENDING"},{"fieldPath":"itemName","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/listopic/databases/(default)/collectionGroups/reviews/indexes/CICAgNi47oMK","queryScope":"COLLECTION","fields":[{"fieldPath":"userId","order":"ASCENDING"},{"fieldPath":"updatedAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/listopic/databases/(default)/collectionGroups/places/indexes/CICAgJiHgokK","queryScope":"COLLECTION","fields":[{"fieldPath":"name_normalized","order":"ASCENDING"},{"fieldPath":"address_normalized","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/listopic/databases/(default)/collectionGroups/reviews/indexes/CICAgOi3kJAK","queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"userId","order":"ASCENDING"},{"fieldPath":"updatedAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"CREATING","density":"SPARSE_ALL"},{"name":"projects/listopic/databases/(default)/collectionGroups/lists/indexes/CICAgJiH2JAK","queryScope":"COLLECTION","fields":[{"fieldPath":"isPublic","order":"ASCENDING"},{"fieldPath":"name","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/listopic/databases/(default)/collectionGroups/reviews/indexes/CICAgJiUsZIK","queryScope":"COLLECTION","fields":[{"fieldPath":"itemName","order":"ASCENDING"},{"fieldPath":"placeId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/listopic/databases/(default)/collectionGroups/lists/indexes/CICAgNi4-ZIK","queryScope":"COLLECTION","fields":[{"fieldPath":"isPublic","order":"ASCENDING"},{"fieldPath":"reviewCount","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"}]}
[debug] [2025-06-23T17:02:39.521Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:39.521Z] Checked if tokens are valid: true, expires at: 1750699335978
[debug] [2025-06-23T17:02:39.521Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* [none]
[debug] [2025-06-23T17:02:39.606Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* 200
[debug] [2025-06-23T17:02:39.606Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/listopic/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* {"fields":[{"name":"projects/listopic/databases/(default)/collectionGroups/__default__/fields/*","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","arrayConfig":"CONTAINS"}],"state":"READY"}]}}]}
[info] i  firestore: The following indexes are defined in your project but are not present in your firestore indexes file:
	(lists) -- (isPublic,ASCENDING) (createdAt,DESCENDING) 
	(lists) -- (userId,ASCENDING) (createdAt,DESCENDING) 
	(reviews) -- (establishmentName,ASCENDING) (itemName,ASCENDING) (createdAt,DESCENDING) 
	(reviews) -- (userId,ASCENDING) (updatedAt,DESCENDING) 
	(places) -- (name_normalized,ASCENDING) (address_normalized,ASCENDING) 
	(reviews) -- (userId,ASCENDING) (updatedAt,DESCENDING) 
	(lists) -- (isPublic,ASCENDING) (name,ASCENDING) 
	(reviews) -- (itemName,ASCENDING) (placeId,ASCENDING) (createdAt,DESCENDING) 
	(lists) -- (isPublic,ASCENDING) (reviewCount,DESCENDING)  
